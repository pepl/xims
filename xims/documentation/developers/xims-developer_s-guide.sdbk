<?xml version="1.0" encoding="UTF-8"?>
<article>
    <title>XIMS Developer Guide</title>

    <articleinfo>
        <authorgroup>
            <author>
                <firstname>Michael</firstname>

                <surname>Kröll</surname>

                <affiliation>
                    <orgname>University of Innsbruck</orgname>
                </affiliation>

                <authorblurb>
                    <para><email>michael.kroell@uibk.ac.at</email></para>
                </authorblurb>
            </author>

            <author>
                <firstname>Hansjörg</firstname>

                <surname>Pehofer</surname>

                <affiliation>
                    <orgname>University of Innsbruck</orgname>
                </affiliation>

                <authorblurb>
                    <para><email>csab1777@uibk.ac.at</email></para>
                </authorblurb>
            </author>

            <author>
                <firstname>Christian</firstname>

                <surname>Glahn</surname>

                <affiliation>
                    <orgname>University of Innsbruck</orgname>
                </affiliation>

                <authorblurb>
                    <para><email>christian.glahn@uibk.ac.at</email></para>
                </authorblurb>
            </author>
        </authorgroup>

        <revhistory>
            <revision>
                <revnumber>$Revision$</revnumber>

                <date>$Date$</date>

                <revremark>A first draft</revremark>
            </revision>
        </revhistory>

        <legalnotice>
            <para>Copyright © 2002 The XIMS Project</para>
        </legalnotice>
    </articleinfo>

    <section>
        <title>Introduction</title>

        <para>replace me</para>
    </section>

    <section>
        <title>Putting it together - an overview of a XIMS installation and how the modules work together</title>

        <section>
            <title>The internal XIMS module dependencies</title>

            <para>Check out xims.*.dia in the doc directory to get an overview.</para>
        </section>

        <section>
            <title>The logic of a XIMS request</title>

            <para>Typical URLs of XIMS-objects have the form http://host/goxims/interface/parameters. Because xims is using an event-based
            CGI-Application-Framework (CGI::XMLApplication), those URLs can have event-names attached in the querystring or POST-content, like
            http://host/goxims/content/path/to/object?edit=edit for example. The &#34;interface&#34;-part of the URL describes what should be managed, for now
            that can be &#34;content&#34; only. Other possible values include &#34;users&#34;, or &#34;tasks&#34;, etc.. In the case the interface is
            &#34;content&#34;, the parameters can also be a virtual path to a content-object included in the path_info-part of the URL.</para>

            <para>The following diagram of the simplified dataflow of a XIMS-request shows the actors involved.</para>

            <para><mediaobject><imageobject><objectinfo><title>Dataflow of a XIMS request</title></objectinfo><imagedata fileref="images/xims-request.png" format="PNG" /></imageobject></mediaobject></para>

            <para>For example, we shall look at what happens, when we request a folder called &#39;subtest&#39; contained in a folder called &#39;test&#39;
            which itself happens to be at the top of the virtual hierarchy. The request URL for this object would be http://host//goxims/content/test/subtest.</para>

            <para>After authentification, goxims uses the first part of the path_info-information to resolve the interface. After stripping the interface-part,
            in this case it is &#34;content&#34;, goxims users the rest of the path_info to locate the requested content-object and with it, its object-type. In
            our example, the object-type of the content-object with the location &#39;subtest&#39; is &#39;Folder&#39;. After knowing that, goxims finishes with
            loading bin/folder.pm. This application-class loads the corresponding content-object-class, XIMS::Folder, and they together are responsible for the
            object-specific application logic.</para>

            <para>Based on the requested event, in this case it is the event &#39;default&#39; because of the missing event-parameters, the content-object-class
            (or its SUPER-classes) load the object-info and pass them back to the application-class, which uses its SUPER-class XIMS::CGI to put the content in
            a XML-DOM via XIMS::SAX. In our example the content is a list of children of the &#39;test&#39;-folder.</para>

            <para>Based on the requested event, the application-class selects a XSL-stylesheet to be rendered with the XML-DOM to the client. In our example
            case the stylesheet is called &#39;folder_default.xsl&#39;. The actual XSL-Transformation is done via CGI::XMLApplication.</para>
        </section>
    </section>

    <section>
        <title>Writing a XIMS module</title>

        <para>XIMS modules are handlers for specific sub-types of the basic xims object. The handlers have to exist on several layers: One in the
        XIMS-Data-Repository - SQL layer, one handler for defining the object class, one handling the application-class, and another one handling the
        object-type-specific user-interface, in form of XSL-Stylesheets, for example.</para>

        <para>Writing a xims module takes therefore the following four steps. We will use an &#34;Anonymous Discussion Forum&#34; as a sample XIMS module to
        have explicit examples.</para>

        <section>
            <title>Defining the Object-Type</title>

            <para>Defining the object-type means letting xims know that a new module shall exist. Our discussion-forum needs two object-types to work, the forum
            itself and contributions posted to it. The implicit naming convention for object-type names uses capitalized nouns including capitalization in noun
            groups. The two DDL-statements for our discussion-forum object-types look like the following then (assuming we use the Oracle-Data-Provider):</para>

            <programlisting>
              INSERT INTO CI_OBJECT_TYPES ( id, name ) VALUES ( OBT_SEQ.NEXTVAL, &#39;AnonDiscussionForum&#39; );
              INSERT INTO CI_OBJECT_TYPES ( id, name ) VALUES ( OBT_SEQ.NEXTVAL, &#39;AnonDiscussionForumContrib&#39; );
              </programlisting>
        </section>

        <section>
            <title>Implementing the Object-Class</title>

            <para>The object classes define the different respectively additional behaviour of the module classes compared to the standard XIMS object.
            XIMS::AnonDiscussionForum shall be a subclass of XIMS::Folder. Because all forum class specifics can be handled using the default fields, it is
            enough to merely copy Folder.pm to AnonDiscussionForum.pm and adjust the naming of the package and the variables and values in the constructor.</para>

            <para>For the implementation of XIMS::AnonDiscussionForumContrib slightly more adjustments are needed. Being a subclass of XIMS::Document we can
            start out with a copy of Document.pm and make the according naming adjustments, similar to the one we did with XIMS::AnonDiscussionForum. Whereas
            XIMS::Folder and XIMS::AnonDiscussionForum are more or less clones, XIMS::AnonDiscussionForumContrib needs to store some extra information that
            XIMS::Document does not. Our anonymous discussion-forum contribution shall store the name of the (anonymous) author, his or her email-address, and
            the IP-Address the posting originated from; three fields that cannot be handled using the default fields. Because possible values for those fields
            will be short strings, storing them in form of key-value pairs in the attributes fields will do the trick. Using attributes() and attribute_by_key()
            methods the task gets even more easier, as the following example accessor-method for the author field, shows.</para>

            <programlisting>
sub author {
    my $self= shift;
    my $author = shift;
    my $retval;

    if ( length $author ) {
        $self-&#62;attribute( author =&#62; $author );
        $retval = 1;
    }
    else {
        return $self-&#62;attribute_by_key(&#39;author&#39;);
    }

    return $retval;
}
     </programlisting>
        </section>

        <section>
            <title>Implementing the Application Class</title>

            <para>Currently, the application-classes are implemented using <ulink url="http://search.cpan.org/~phish/CGI-XMLApplication-1.1.2/XMLApplication.pm">CGI::XMLApplication</ulink>. Similar to the creation of the
            object-classes we can start out with a copy of a similar class and adjust the naming. anondiscussionforum.pm is a subclass of folder.pm; only
            event_default and the publishing events need to be overwritten, since our discussionforums shall not be exported. anondiscussionforumcontrib.pm and
            document.pm look more different from each other. For example, anondiscussionforumcontrib::event_store() has to handle &#34;author&#34;,
            &#34;email&#34;, and &#34;senderip&#34;, whereas document::event_store() does not. On the other hand, there is no handling of keywords or abstract
            needed in the anonymous discussionforum contribution application class.</para>
        </section>

        <section>
            <title>Creating the XSL-Stylesheets</title>

            <para>The last step to get a XIMS module working are XSL-Stylesheets for the events &#34;create&#34;, &#34;default&#34;, and &#34;edit&#34;. For
            example, for our anonymous discussion forum we need the stylesheets: anondiscussionforum_create.xsl, anondiscussionforum_default.xsl, and
            anondiscussionforum_edit.xsl. To create those stylesheets we have to follow the known, copy-take-as-template-and-adapt-philosophy for now. In the
            case of anondiscussionforum_create.xsl this means replacing &#34;Document&#34; with &#34;Contribution&#34; and adapting the needed HTML-form fields.</para>
        </section>

        <section>
            <title>Communication between application and serialization classes</title>

            <para>Most application classes inherit XIMS::CGI, which itself inherits CGI::XMLApplication. For communication from the application classes to the
            serialization classes a XIMS::ApplicationContext object is used.</para>

            <section>
                <title>XIMS::ApplicationContext</title>

                <remark>&#39;properties&#39;, &#39;apache&#39;, &#39;user&#39;, # used for user-management &#39;userlist&#39;, # used for privilege managment
                &#39;object&#39;, # used for content-object-management &#39;objectlist&#39;, # used for content-object-listings like search results or site maps
                &#39;parent&#39;, # needed during object creation &#39;session&#39;, &#39;cookie&#39;, &#39;sax_filter&#39;, # a reference to a list of SAX
                filter classes &#39;sax_generator&#39;, # a reference to a SAX generator class</remark>
            </section>

            <section>
                <title>Application Context Properties</title>

                <para>Application properties are used to change the behaviour of the runtime system. All flags and information that are not used in the content
                or by the SAX pipeline should go here.</para>

                <para>Filter properties are used to control the behaviour of some filter in the SAX pipeline. Such flags are only useful for filters that are
                application specific, since XIMS filter do not define any overall flags in this section.</para>

                <para>Content properties are use mostly. These filter allow to control what data will appear in the content delivered to the client. The content
                properties are only used for the basic XML data, but not for the stylesheet.</para>

                <para>The following lists describes all items that are recognized by the core system.</para>

                <para>(1) Application Properties</para>

                <itemizedlist mark="bullet">
                    <listitem>
                        <para>style</para>

                        <para>This tells which style for the current object shall be used. This defines basicly the appearance of the user interface. Actually
                        this is only a part of the effective stylesheet name. XIMS assumes the object type with the style name stored in this property as the
                        stylesheet name.</para>

                        <para>If no style is defined in the preferences, style is automaticly set to &#39;default&#39;. (see example below)</para>
                    </listitem>

                    <listitem>
                        <para>styleprefix</para>

                        <para>Per default, XIMS assumes the object type&#39;s name as the stylesheet prefix. In some cases this is not what a programer wants.
                        Through the styleprefix one can alter this behaviour.</para>
                    </listitem>

                    <listitem>
                        <para>preservelocation</para>

                        <para>Useful for handling object types, where the location should not be checked for unsafe characters like URLLinks for example.</para>
                    </listitem>

                    <listitem>
                        <para>keepsuffix</para>

                        <para>Object types like File or Image should have kept their suffix untouched during object creation.</para>
                    </listitem>
                </itemizedlist>

                <para>(2) Filter Properties</para>

                <para>none defined yet</para>

                <para>(3) Content Properties</para>

                <itemizedlist mark="bullet">
                    <listitem>
                        <para>getchildren</para>

                        <para>This itself can contain subclasses holding properties regarding the serialization for the context object&#39;s children.</para>

                        <itemizedlist>
                            <listitem>
                                <para>objectid</para>

                                <para>Set this to to an object id to get its children for contentbrowsing.</para>
                            </listitem>

                            <listitem>
                                <para>objecttypes</para>

                                <para>Set this to a reference to an array of object type names to filter specific object types. Useful for browsing for special
                                object types.</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>

                    <listitem>
                        <para>escapebody</para>

                        <para>For objects that contain XML data in their body, it some times it is usefull not to process the XML. If this data should be stored
                        as it is (as CDATA) to the resulting DOM, one has to set this flag to TRUE (1).</para>
                    </listitem>

                    <listitem>
                        <para>childrenbybodyfilter</para>

                        <para></para>
                    </listitem>

                    <listitem>
                        <para>getformatsandtypes</para>

                        <para>If set, information on all available object types and data formats is added to the DOM. Whereas per default, only the information
                        for the used object types and data formats respectively being used from current request&#39;s objects is added. <literal>getformatsandtypes</literal>
                        is useful to get a list of available object types for object creation for example.</para>
                    </listitem>

                    <listitem>
                        <para>siblingscount</para>

                        <para>Used for getting sibling information during repositionin objects.</para>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
    </section>

    <section>
        <title>A Matter of Style</title>

        <para>We follow the style-guidelines laid out in <command>perldoc perlstyle</command>. The following list is - with a few exceptions - an excerpt of
        some of the main principles there, please read and follow the rest of them.</para>

        <itemizedlist mark="bullet">
            <listitem>
                <para>use strict</para>
            </listitem>

            <listitem>
                <para>4-spaces indentation</para>
            </listitem>

            <listitem>
                <para>Opening curly on same line as keyword, if possible, otherwise line up.</para>
            </listitem>

            <listitem>
                <para>Line up corresponding items vertically.</para>
            </listitem>

            <listitem>
                <para>Space before the opening curly of a multi-line BLOCK.</para>
            </listitem>

            <listitem>
                <para>One-line BLOCK may be put on one line, including curlies.</para>
            </listitem>

            <listitem>
                <para>No space before the semicolon.</para>
            </listitem>

            <listitem>
                <para>Semicolon INCLUDED in &#34;short&#34; one-line BLOCK.</para>
            </listitem>

            <listitem>
                <para>Trailing &#34;,&#34; in hash and array definitions.</para>
            </listitem>

            <listitem>
                <para>Space around most operators.</para>
            </listitem>

            <listitem>
                <para>Space around a &#34;complex&#34; subscript (inside brackets).</para>
            </listitem>

            <listitem>
                <para>Blank lines between chunks that do different things.</para>
            </listitem>

            <listitem>
                <para>Uncuddled elses.</para>
            </listitem>

            <listitem>
                <para>No space between function name and its opening parenthesis.</para>
            </listitem>

            <listitem>
                <para>Space after each comma.</para>
            </listitem>

            <listitem>
                <para>Long lines broken after an operator (except &#34;and&#34; and &#34;or&#34;).</para>
            </listitem>
        </itemizedlist>
    </section>

    <section>
        <title>Commenting style</title>

        <section>
            <title>Global fuzz</title>

            <para>We chose not to use POD for commenting our code. We want comments where things actually happen, POD-markup gets pretty unreadable if used that
            way. We therefore had to find our own convention doing the job. (Relax, its quite simple and readable both for humans and machines :)</para>

            <para><ulink url="">comment2dbk.pl</ulink> is a simple script that parses sourcefiles and aims to generate DocBook-XML out of it. The parser
            isn&#39;t all too smart, so you better strictly follow the conventions. To put it other way &#39;round: If the output makes sense, you probably got
            it right.</para>

            <para>To nail it down in a few sentences: We have a block of comments before method-declarations, each divided by the four sections SYNOPSIS,
            PARAMETER, RETURNS and DESCRIPTION. Additionally we allow (encourage, actually) blocks of comments on arbitrary places in the method-body. These are
            simply appended to the DESCRIPTION. If used before the first method it gives a block that can drop some wisdom about the whole package or file - we
            agree that there is at maximum one package per file, don&#39;t we? We also have a convention for grouping method to logical blocks but decided not
            to use it for now. But read on and stick your toes into...</para>
        </section>

        <section>
            <title>The gory details</title>

            <para>Starting with an (well, kind of made up) example is probably not the worst idea:</para>

            <programlisting>
package Circus::FleaCircus;

@ISA = qw/Foo::Circus/;

#
# Circus::FleaCircus is a class representing a fleacircus. (you guessed that, right?)
#
# Beeing derived from Foo::Circus, it is composed of flea, trainer, audience und showroom
# instances, and implements methods to steer these.
#

use Foo::Circus;
use Circus::Fleas;
use Circus::Trainer;
use Circus::Audience;
use Circus::Showroom;

# ###########################################################################
# some quite clever methods
# ###########################################################################


##
#
# SYNOPSIS
#
#     Circus::FleaCircus-&#62;new($numOfFleas, $context)
#
# PARAMETER
#
#     $numOfFleas: the number of fleaobjects instantiated
#     $context:    the application context object
#
# RETURNS
#
#     $fleaCircus: FleaCircus object
#
# DESCRIPTION
#
#     Constructor
#
sub new {
    my $self       = shift;
    my $numOfFleas = shift;
    my $context    = shift;

    my $fleaCircus = undef; #return value
    #
    # The SuperClass Foo::Circus still
    # takes care of most things related to Showroom and Audience.
    #
    $self-&#62;SUPER::new();

    if ( $context ) {
        #warn &#34;Buhu!&#34;;
        my $dp = $context-&#62;data_provider();
 ....
      </programlisting>

            <para>The Example may look a stuffed, but shows almost anything we can do right now. A rendered output of this sample can be seen <ulink
            url="./flea_circus_example.sdbk">here</ulink></para>

            <para>comm2dbk.pl generates the filetitles from it&#39;s idea of the relative path to the parsed file. Call it with root_of_our_sourcetree as CWD.</para>

            <programlisting>
#
# Circus::FleaCircus is a class representing a fleacircus. (you guessed that, right?)
#
# Beeing derived from Foo::Circus, it is composed of flea, trainer, audience und showroom
# instances, and implements methods to steer these.
#
      </programlisting>

            <para>Now the first comment block: It starts with a line with a single hash. When the parser finds a line consisting of zero to any whitespaces, a
            single hash, and zero to any whitespaces till newline. Without that starting hash the whole block would have been ommitted. The next single-hash
            line closes this and opens up the next paragraph. The block is closed with another single-hash-line. That beeing mere for optical reasons, the
            parser actually recognises a line without any(!) hash as end of block.</para>

            <programlisting>
...
# ###########################################################################
# some quite clever methods
# ###########################################################################
...
        </programlisting>

            <para>A hash on the first column, a single space and one to any number of hashes marks a grouping. The idea is that you should group functionally
            similar methods together i.E internal helper functions at the end of the file. Right now we dont render it to the docs, but we most likely will
            later. The Pattern is reserved and you are encouraged to use it.</para>

            <programlisting>
...
##
#
# SYNOPSIS
#
#     Circus::FleaCircus-&#62;new($numOfFleas, $context)
#
# PARAMETER
#
#     $numOfFleas: the number of fleaobjects instantiated
#     $context:    the application context object
#
# RETURNS
#
#     $fleaCircus: FleaCircus object
#
# DESCRIPTION
#
#     Constructor
#
sub new {
...
      </programlisting>

            <para>Two hashes at the beginning of a line mark the start a method-block. One Hash at the beginning of a line, one space and at least four capital
            letters are recognised as heading. The headings &#39;SYNOPSIS&#39; and &#39;DESCRIPTION&#39; are threated specially:</para>

            <para>SYNOPSIS makes the parser chose the text of the following line as title for the Method-Section.</para>

            <programlisting>
...
    my $fleaCircus = undef; #return value
    #
    # The SuperClass Foo::Circus still
    # takes care of most things related to Showroom and Audience.
    #
    $self-&#62;SUPER::new();
...
      </programlisting>

            <para>DESCRIPTION lets the parser pull all following comment blocks as paragraphs under the &#39;DESCRIPTION&#39; heading. (at least until the next
            heading.) So be aware that the comments you markup in the code should give a somewhat continous reading in the docs.</para>

            <programlisting>
...
    if ( $context ) {
        #warn &#34;Buhu!&#34;;
        my $dp = $context-&#62;data_provider();
...
      </programlisting>

            <para>Comments not using one of these patterns are ignored, you still can comment out code, or make single or multiline comments that dont go into
            the docs.</para>
        </section>
    </section>

    <section>
        <title>Debuglevel Reference</title>

        <para>replace me</para>

        <table frame="all">
            <title>Debug-Levels</title>

            <tgroup align="left" cols="3" colsep="1" rowsep="1">
                <thead>
                    <row>
                        <entry>Level</entry>

                        <entry>Description</entry>

                        <entry>Comment</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry>1</entry>

                        <entry>Fatals</entry>

                        <entry>unrecoverable errors</entry>
                    </row>

                    <row>
                        <entry>2</entry>

                        <entry>Errors</entry>

                        <entry>serious error conditions</entry>
                    </row>

                    <row>
                        <entry>3</entry>

                        <entry>Warnings</entry>

                        <entry>non-serious error-conditions</entry>
                    </row>

                    <row>
                        <entry>4</entry>

                        <entry>Infos</entry>

                        <entry>&#34;interesting&#34; events</entry>
                    </row>

                    <row>
                        <entry>5</entry>

                        <entry>Infos, verbose</entry>

                        <entry>ie: method START and EXIT</entry>
                    </row>

                    <row>
                        <entry>6</entry>

                        <entry>SQL-strings and values of important variables</entry>

                        <entry></entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <section>
            <title>Examples for using Debugmessages</title>

            <para>replace me</para>
        </section>
    </section>
</article>