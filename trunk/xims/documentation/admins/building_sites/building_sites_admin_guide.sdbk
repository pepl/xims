<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<article>
    <title>Building Sites with XIMS (Admin Guide)</title>

    <articleinfo>
        <author>
            <firstname>Michael</firstname>

            <surname>Kröll</surname>

            <affiliation>
                <orgname>University of Innsbruck</orgname>
            </affiliation>

            <authorblurb>
                <para><email>michael.kroell@uibk.ac.at</email></para>
            </authorblurb>
        </author>

        <revhistory>
            <revision>
                <revnumber>$Revision $</revnumber>

                <date>$Date $</date>
            </revision>
        </revhistory>

        <legalnotice>
            <para>Copyright © 2003-2005</para>
        </legalnotice>
    </articleinfo>

    <section>
        <title>Import/Create Site Directory</title>

        <para>For demonstration purposes, we will build an example site for the <literal>Grey Dahut Preservation Initiative (GDPI)</literal>. Sample content for
        that site is provided in the examples directory of the <acronym>XIMS</acronym> distribution in <filename>simple.examplesite.tld</filename>.</para>

        <para>To build your site, you have two options to start with the SiteRoot content: First, you could create the content using the <acronym>XIMS</acronym>
        web user interface, second you can build the core content offline on disk and import it later using the <filename>fs_importer.pl</filename> tool. For
        our <acronym>GDPI</acronym> site, we will take the shortcut of importing the already existing files in the <filename>examples/simple.examplesite.tld</filename>
        directory. After cd&#39;ing to the examples directory of your <acronym>XIMS</acronym> distribution, issue the following command:</para>

        <para>Note: the script assumes that the password of the admin user is still the default password which is set after the <acronym>XIMS</acronym>
        installation. If you have changed that, you have to adapt the script.</para>

        <programlisting>[user@host examples]$ sh import_publish-simple.examplesite.tld.sh</programlisting>

        <para>This script will do the following:</para>

        <orderedlist>
            <listitem>
                <para>Import the simple.examplesite.tld directory under <filename>/root</filename> using <filename>fs_importer.pl</filename></para>
            </listitem>

            <listitem>
                <para>Convert the imported folder to a SiteRoot and set its <literal>SiteRoot URL</literal> to http://simple.examplesite.tld using
                <filename>folder_to_objectroot.pl</filename></para>
            </listitem>

            <listitem>
                <para>Add <literal>DepartmentLinks</literal> for <filename>index.html</filename>,<filename>about.html</filename>,<filename>team.html</filename>,
                and <filename>contact.html</filename> using <filename>$xims_home/xims_add_departmentlinks.pl</filename></para>
            </listitem>
        </orderedlist>

        <para>If everything went right, you should see <computeroutput>Successfully added Departmentlinks to &#39;/simple.examplesite.tld&#39;</computeroutput>
        in your terminal and the imported site should be available at <literal>http://yourximshost.domain/goxims/content/simple.examplesite.tld</literal></para>
    </section>

    <section>
        <title>Create Role and User</title>

        <para>Now, as we have got some content to work on, we need the users to get access to it. We will start out with creating a role for the
        <literal>Grey Dahut Preservation Initiative (GDPI)</literal> called <literal>GDPI</literal>.</para>

        <section>
            <title>Create role and assign it to parent role</title>

            <para>Log in to <abbrev>XIMS</abbrev> as admin user and click on &#34;Manage users and roles&#34; at the &#34;Administrative Options&#34; section of
            your start page. At the &#34;Create User&#34; screen enter <literal>GDPI</literal>&#34; as name of the user, &#34;Grey Dahut Preserv.
            Initiative&#34; as full name and set the &#34;Account is an Abstract Role&#34;-option to &#34;yes&#34;. After the role has been created, click on
            &#34;Grant Role&#34; and grant it the role &#34;everyone&#34;.</para>
        </section>

        <section>
            <title>Assign default bookmark to role</title>

            <para>After going back to the User/Role Management screen, click on &#34;Bookmarks&#34; for the newly created <literal>GDPI</literal> role. The path
            to the default bookmark is <filename>/simple.examplesite.tld</filename> in this case. Before clicking on create, do not forget to set the new
            bookmark as default bookmark.</para>

            <figure>
                <title>Bookmarks for role &#39;GDPI&#39;</title>

                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/gdpi_bookmarks.png" />
                    </imageobject>
                </mediaobject>
            </figure>

            <para>The default bookmark will be inherited to all users of the <literal>GDPI</literal> role.</para>
        </section>

        <section>
            <title>Create user and assign role</title>

            <para>Back in the User/Role Management screen, we will create a user called <literal>bender</literal> for the president of the <acronym>GDPI</acronym>
            and grant it the <literal>GDPI</literal> role.</para>

            <figure>
                <title>Role membership for user &#39;bender&#39;</title>

                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/bender_role_membership.png" />
                    </imageobject>
                </mediaobject>
            </figure>
        </section>
    </section>

    <section>
        <title>Set user metadata</title>

        <para>You can move on to section <link linkend="publishsite">Publish Site</link> if you did not import your content using <literal>fs_importer.pl</literal>
        but created it using the web interface.</para>

        <para>Because we have imported the contens of <literal>simple.examplesite.tld</literal> as <literal>admin</literal>, all the user medata of the objects
        points to the wrong person, as long as the <literal>admin</literal> is not the original author of course. In the case of the <acronym>GDPI</acronym>
        homepage president Bender himself is the author of the content. So, we want to update the imported <acronym>XIMS</acronym> objects accordingly, using
        the <filename>xims_set_user_metada.pl</filename> tool in the <filename>$xims_home/sbin</filename> subdirectory. After cd&#39;ing
        to it, issue the following command:</para>

        <programlisting>[user@host sbin]# ./xims_set_user_metadata.pl -u admin -r -o bender -c bender -l bender /simple.examplesite.tld</programlisting>

        <para>This will set the owner, creator and last modifier of all 16 objects at <filename>/simple.examplesite.tld</filename> to the user
        <literal>bender</literal>. Note that <filename>xims_set_user_metadata.pl</filename> requires <acronym>XIMS</acronym> admin privileges to run.</para>
    </section>

    <section>
        <title>Assign Privileges</title>

        <para>Now, as <literal>bender</literal> is the owner of the content, we may want to give him privileges to actually manage it. We could do that through
        the web user interface, however doing it recursively using the <filename>xims_user_privileges.pl</filename> tool in the <filename>$xims_home/bin</filename> directory
        is less painful for your mouse finger:</para>

        <programlisting>[user@host bin]$ ./xims_user_privileges.pl -u admin -r -l MODIFY,PUBLISH -g bender /simple.examplesite.tld</programlisting>

        <para>Note: MODIFY is a shortcut for the VIEW, WRITE, DELETE, ATTRIBUTES, TRANSLATE, CREATE, MOVE, LINK, ATTRIBUTES_ALL, DELETE_ALL, GRANT, GRANT_ALL,
        and OWNER privileges.</para>

        <para>After granting to the user <literal>bender</literal>, we want to grant VIEW privileges to the <literal>GDPI</literal> role, to let other possible
        future grantees of <literal>GDPI</literal> see the content.</para>

        <programlisting>[user@host bin]$ ./xims_user_privileges.pl -u admin -r -g GDPI /simple.examplesite.tld </programlisting>

        <para>Later, Bender can manually grant other privileges besides VIEW to members of <literal>GDPI</literal>.</para>
    </section>

    <section>
        <title id="publishsite">Publish Site</title>

        <para>After you have created your initial content base, you may want to see how it will look like after it has been published. Per default, the
        <literal>XIMS</literal> config option <literal>ResolveRelToSiteRoots</literal> is set to &#39;1&#39;. As a consequence, all published
        <acronym>XIMS</acronym> internal references are created relative to the <literal>SiteRoot</literal> instead of being published relative to &#39;<filename>/root</filename>&#39;.
        For example, the link to the <literal>ObjectRoot</literal> settings file <filename>ou.xml</filename> created during export in the published version of
        <filename>index.html</filename>, like in every <literal>Document</literal>, will be set to &#39;<filename>/ou.xml</filename>&#39;. If
        <literal>ResolveRelToSiteRoots</literal> would be set to &#39;0&#39;, the link to <filename>ou.xml</filename> would point to &#39;<filename>/simple.examplesite.tld/ou.xml</filename>&#39;.
        As <literal>ResolveRelToSiteRoots</literal> is set to &#39;1&#39; per default, you are expected to set up Apache virtual hosts for every site and direct
        the <literal>SiteRoot URL</literal>s to the according addresses.</para>

        <section>
            <title>Prepare publishing</title>

            <para>During the development of your site&#39;s content, you surely want to already test and develop the navigation- and styling- elements of the
            site. To avoid adapting paths to stylesheets in the Apache AxKit server configuration and to avoid adapting paths inside your stylesheets, which
            would have to be changed from <filename>/ximspubroot/simple.examplesite.tld/stylesheets/default.css</filename> to <filename>http://simple.examplesite.tld/stylesheets/default.css</filename>
            for example, you have the option to locally use the future live <literal>SiteRoot URL</literal> or a temporary staging URL.</para>

            <section>
                <title>Scenario 1: simple.examplesite.tld is already running on a different server or is not running anywhere yet.</title>

                <para>In that case you can locally set up a <acronym>DNS</acronym> entry for <literal>simple.examplesite.tld</literal> to get access to it. On
                Unix flavor systems you have to adapt the <filename>/etc/hosts</filename> file as superuser for that, on Win32 boxes, the file can be found at
                <filename>%SystemRoot%\%Windir%\system32\drivers\etc\hosts</filename> (e.g.: <filename>C:\WINDOWS\system32\drivers\etc\hosts</filename>). Add an
                entry in the form of &#34;ip-address hostname&#34;, &#34;<userinput>138.232.10.18 simple.examplesite.tld</userinput>&#34; for example. After
                your local workstation knows where to look for <literal>simple.examplesite.tld</literal>, you have to tell your Apache server what to do if a
                browser requests <literal>simple.examplesite.tld</literal>. You have to add the configuration for the virtual server similar as described in
                <ulink url="../managing_multiple_sites_with_xims.sdbk">Managing Multiple Sites with XIMS</ulink>:</para>

                <programlisting>&#60;VirtualHost *&#62;
    ServerName simple.examplesite.tld
    DocumentRoot /www/ximspubroot/simple.examplesite.tld
    Include conf/simple.examplesite.tld.axkit-conf
&#60;/VirtualHost&#62;</programlisting>

                <para>Note: You can use the sample Apache config provided in the examples directory of your <acronym>XIMS</acronym> installation for that. Just
                add the line &#34;<userinput>Include /usr/local/xims/examples/simple.examplesite.tld-httpd.conf</userinput>&#34; in your <filename>httpd.conf</filename>.</para>
            </section>

            <section>
                <title>Scenario 2: simple.examplesite.tld is already running and it runs on the same server</title>

                <para>In that case, you may set up a temporary staging address for your site. You can do that locally in your <filename>hosts</filename> file as
                described above, or register the staging <acronym>URL</acronym> at a <acronym>DNS</acronym> server. You still have to configure the virtual host
                in your Apache server configuration. For example:</para>

                <programlisting>&#60;VirtualHost *&#62;
    ServerName staging.examplesite.tld
    DocumentRoot /www/ximspubroot/simple.examplesite.tld
    Include conf/simple.examplesite.tld.axkit-conf
&#60;/VirtualHost&#62;</programlisting>

                <para>To point the users to the correct <acronym>URL</acronym> of the staging server, you have to change the <literal>SiteRoot URL</literal>
                accordingly. The <literal>SiteRool URL</literal> <literal>http://simple.examplesite.tld</literal>, set by <filename>import_publish-simple.examplesite.tld.sh</filename>,
                must be changed to <literal>http://staging.examplesite.tld</literal> in our example.</para>
            </section>
        </section>

        <section>
            <title>Update Apache Axkit configuration</title>

            <para>As you mave have noticed, a file <filename>conf/simple.examplesite.tld.axkit-conf</filename> is referenced in the above Apache config
            examples. This file configures AxKit to use the stylesheet <filename>/stylesheets/default.xsl</filename> for all *.html files. The config could look
            like the following:</para>

            <para>Note: If you included <filename>/usr/local/xims/examples/simple.examplesite.tld-httpd.conf</filename> as described in the note above, AxKit
            will already use <filename>/usr/local/xims/examples/simple.examplesite.tld-axkit.conf</filename> and you do not need to create an extra
            <filename>conf/simple.examplesite.tld.axkit-conf</filename>.</para>

            <programlisting>&#60;Files *.html&#62;
    SetHandler axkit
    AxAddStyleMap text/xsl Apache::AxKit::Language::LibXSLT
    AxErrorStylesheet text/xsl /stylesheets/error.xsl
    AxAddPlugin Apache::AxKit::Plugin::Passthru
    AxAddPlugin Apache::AxKit::Plugin::AddXSLParams::Request
    PerlSetVar AxAddXSLParamGroups &#34;Request-Common HTTPHeaders VerboseURI&#34;
    AxAddProcessor text/xsl /stylesheets/default.xsl
&#60;/Files&#62;</programlisting>
        </section>

        <section>
            <title>Publish Objects</title>

            <para>Now, as <acronym>URL</acronym>s, Apache, and AxKit are configured, you can start to publish your content objects. You can do that either by
            using the web interface or by publishing all at once using the <filename>xims_publisher.pl</filename> tool in the <filename>$xims_home/bin</filename> directory:</para>

            <para>Warning: If <filename>xims_publisher.pl</filename> does not have the setuid flag set, you can only use <filename>xims_publisher.pl</filename> as
            superuser or as an user with write access to the <filename>ximspubroot</filename> directory respectively!</para>

            <programlisting>[user@host bin]$ ./xims_publisher.pl -u admin -r /simple.examplesite.tld</programlisting>

            <para>To have the expected results regarding the use of the <literal>DepartmentLinks</literal> portlet, we have to republish the <literal>SiteRoot</literal>.
            This will add the link to the - by now published - portlet in <filename>ou.xml</filename>:</para>

            <programlisting>[user@host bin]$ ./xims_publisher.pl -u admin /simple.examplesite.tld</programlisting>

            <para>If you followed the example config so far and everything has worked, you will see the following index page:</para>

            <figure>
                <title>The published GDPI homepage</title>

                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/gdpi_published.png" />
                    </imageobject>
                </mediaobject>
            </figure>
        </section>

        <section>
            <title>Go Live</title>

            <para>From the administrative point of view, there is little to do to go live now. With the above mentioned scenario 1, the only thing to do is to
            change the <acronym>DNS</acronym> entry for the old <literal>simple.examplesite.tld</literal> to point to the new <acronym>XIMS</acronym> powered
            host. If you have a set up similar to the one described in scenario 2, you have to change two things to go live: First, adapt the name of the
            virtual host in the Apache config to the name of the final production server, <literal>simple.examplesite.tld</literal> in our example. And second,
            update the <literal>SiteRoot URL</literal> inside <acronym>XIMS</acronym> accordingly. In our example, that would mean changing <literal>http://staging.examplesite.tld</literal>
            back to <literal>http://simple.examplesite.tld again</literal> by editing <literal>/simple.examplesite.tld</literal>.</para>
        </section>
    </section>
</article>