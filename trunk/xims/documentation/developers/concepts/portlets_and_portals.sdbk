<?xml version="1.0" encoding="ISO-8859-1"?>
<article><title>Portlets and Portals</title>
    <articleinfo><author><firstname>Christian</firstname><surname>Glahn</surname><affiliation><address format="linespecific">christian.glahn@uibk.ac.at</address></affiliation></author></articleinfo>

    <section><title>Introduction</title><para>
            XIMS data was not only designed for monolitic content. One
            key target was to be able to have <emphasis>information
            areas</emphasis> (portlets) that can be added to any page
            as prefered as well as combined to complex pages commonly
            known as Portals. This document describes the concept of
            portlets and portals in XIMS.
        </para><para>
            XIMS itself will not handle the presentation of a portlet,
            but helps organizing the content a certain portlet offers
            the user. This may differ from what a xsl rendered version
            may display to a user. Therefore XIMS offers an abstract
            view on a portlet or portal.
        </para>

        <para>
            This document is split into two major parts: (a) A major
            outline about the concept of Portals and portlets in XIMS
            and (b) an introduction into the technical implementation
            of these special object-types.
        </para></section>

    <section><title>Concept of Portals and Portlets</title>

        <para>
            Poratals and Portlets should provide a different view on
            data stored in different places and/ or different
            ways. This is often called content syndication.
        </para><section><title>Portlets</title><section><title>What are Portlets</title><para>
                    A portlet is a special view on a set of data. On
                    webpages portlets commonly appear as boxes aside
                    of the main content of a page. E.g. a site
                    navigation showing the toplevel documents and
                    folders, is such a special portlet.
                </para><para>
                    Technically a portlet is not part of the content
                    of the page its shown with. From that view a
                    portlet is part of the interface and needs to be
                    loaded by the associated stylesheet. From that
                    point a portlet is similar to a widget of
                    graphical userinterfaces. XIMS itself stores only
                    the information which information should made
                    available to the real widget (which is part of the
                    stylesheet) - once more XIMS splits information and
                    presentation.
                </para><para>
                    For the content manager this means he has to
                    decide how to organize the information that will
                    be shown in the portlet. To understand this
                    workflow there is need to explain how portlets
                    work.
                </para><para>
                    XIMS implements portlets as filter on
                    objects. This means a portlet is similar to a
                    symbolic link: it points to the object it should
                    filter. Then a user may specify rules to control
                    the content available in the portlet. This filter
                    behaves differently depending of the general type
                    of the object it points to. From the view of a
                    Portlet there are only two different types of
                    objects: content and container. A filter on a
                    content object (like a document) will only filter
                    the column data of the object the portlet points
                    to. If the portlet points to a container object
                    (such as folder, DepartmentRoots etc.) the filter
                    will not filter the object itself but the child
                    objects (descendants?) of the given
                    object. Therfore a portlet pointing to a container
                    has an object filter in <emphasis>addition</emphasis>
                    to the content filter as already described.
                </para><para>
                    While a content filter restricts the data of an
                    object that is stored in the portlet, the object
                    filter allows to define a subset of objects, that
                    are made available. For example a news portlet may
                    only display those <emphasis>documents</emphasis> of
                    the referred folder that have the
                    <emphasis>new</emphasis> flag set. How these
                    filters are build are described below in more
                    detail.
                </para></section><section><title>Where to use them</title><para>
                    Portlets are always useful when information should
                    be made available in the same (or at least
                    similar) way on a set of pages. Portlets help to
                    organize such views.
                </para><para>
                    Therefore a portlet is always usefull if such a
                    view is shared by many content pages or if data
                    has to be collected from different content
                    objects. The latter is important for portal pages
                    (see below).
                </para></section></section>

        <section><title>Portals</title><section><title>What are Portals</title><para>
                    After discussing portlets, portals are the next
                    step. Basicly a portal is a page containing
                    <emphasis>only</emphasis> references to portlets
                    (no other protlet types). In common such pages are
                    found as the startpages of a certain site which is
                    where the name originally comes from. In XIMS such
                    pages may appear at any level an user preferres.
                </para><para>
                    Inside XIMS a portal is stored as a container that
                    can only contain symbolic links to portlets. In
                    the exported filesystem the portal will be
                    transformed into a XML document containing a bunch
                    of <emphasis>x-includes</emphasis>. This means the
                    portlets of a portal are not loaded by the
                    stylesheet. Instead they are provided directly by
                    the portal document.
                </para>

            </section><section><title>When to use Portals</title>

                <para>
                    Portals are useful if there is content spread over
                    various object or folders and should be shown
                    under a single location as an overview.
                </para></section></section></section><section><title>Technical Outline</title><para>
        </para>
        <section><title>Portlets</title><section><title>Common Implementation</title>

                <para>
                    All Portlets are special symbolic links. Different
                    to symbolic links they don't make the referred
                    content just available. Instead they are ment to
                    offer a special <emphasis>filtered</emphasis> view
                    on the stored content. There are two variations of
                    these filters: Content filter and Object
                    Filter. From the view of the filesystem portlets
                    are pseudo container, containing parts of the data
                    of other objects.
                </para><para>
                    The different filter types do not affect
                    each other. A content filter must be aware
                    about the different object types, since not
                    all object types have all columns present.
                </para>

                <section><title>Object Filter</title><para>
                        An object filter decides which objects are
                        stored inside the portlet.
                    </para></section><section><title>Content Definition</title><para>
                        The Content Definition restricts the object
                        data stored in the portlet itself. Such a
                        filter limits the information of a given
                        object that will be stored in the
                        portlet. This gives the user control about the
                        information that is directly available in the
                        portlet. One can understand this section as
                        the projection part in SQL Queries.
                    </para><para>
                        Content Definition work global. This means no
                        difference is made between the various object
                        types on the description level or on the
                        hierarchical level. Thus an user can specify
                        either if a column should be existent in a
                        portlet or not.
                    </para><para>
                        The definition works global, since only the
                        object types specified in this section will be
                        available in the portlet - no matter where
                        they are found in the hierarchy.
                    </para></section><section><title>Common Filter Flow</title><para>
                        The filters are commonly run as a SAX filter
                        before output.
                    </para><orderedlist><listitem>Parsing of the object-filter
                        conditions</listitem><listitem>Fetch the object id's from the
                        database</listitem><listitem>Check which information each object
                        should contain</listitem>

                        <listitem>Fetch the objects as required from
                        the database</listitem></orderedlist></section><section><title>Exporter</title><para>
                        There are two stages of the portlet
                        export. First there is the generic export such
                        as for any other object as well. In this case
                        the filters are run to decide which content is
                        stored inside the portlet. After the initial
                        export the portlet enters an
                        <emphasis>auto-export</emphasis> mode.
                    </para></section></section><section><title>Portlet Types</title><para>

                </para><section><title>Headlines</title><para>not done yet</para></section><section><title>Journals</title><para>not done yet</para></section><section><title>Link Lists</title><para>not done yet</para></section><section><title>Navigation</title><para>not done yet</para></section><section><title>Object Portlets</title><para>
                        An object portlet is a little special to the
                        other portlet types. First it is a link to a
                        special object, that is <emphasis>not</emphasis> a
                        container. Because of this an object portlet
                        has only Content Filter.
                    </para></section></section><section><title>Filter Language</title>

                <para>
                    A user should be able to define the filters
                    applied on a portlet through the
                    interface. Internally this information is stored
                    as XML in the body field of the portlet. This
                    information must using a kontextfree definition.
                    Also the two types of filter types has to be
                    represented in this as well.
                </para><para>
                    TODO: <emphasis>filter schema</emphasis>
                </para><section><title>Content Definition</title><para>
                        The content of the portlet is described in a
                        special section of the portlet definition:
                        the <emphasis>content-definition</emphasis>.
                    </para><para>
                        the content definition contains 4 items:
                    </para><orderedlist><listitem><para>
                                column
                            </para></listitem><listitem><para>
                                object-type
                            </para></listitem><listitem><para>
                                depth
                            </para></listitem><listitem><para>
                                resolve-links
                            </para></listitem></orderedlist><para>
                        The <emphasis>column</emphasis> has a required
                        attribute <emphasis>name</emphasis>. This name
                        has to hold the column name, that should be
                        extra loaded with the portlet. One needs only
                        to specify extra columns. A portlet will
                        <emphasis>always</emphasis> contain a set of
                        basic columns such as location or object title
                        for an object.
                    </para><para>
                        The <emphasis>column</emphasis> tag has no
                        content. For each extra column to be loaded in
                        the portlet on MUST specify a new column tag.
                    </para>

                    <para>
                        The <emphasis>object-type</emphasis> entry
                        tells the content definition which object
                        types the portlet MUST contain. This is a
                        positive list. each object regardless of its
                        level has to match one of the specified
                        object-types. if no object type is defined all
                        objects will be loaded.
                    </para><para>
                        The <emphasis>depth</emphasis> entry has a
                        single attribute <emphasis>level</emphasis>
                        that contains the numeric value of childobject
                        levels to load into the object. There MUST
                        exist maximum one depth entry for the entire
                        portlet.
                    </para><para>
                        The depth specified here defines only the
                        level up to which data will be
                        <emphasis>loaded</emphasis>. The portlet
                        filter itself will only work on the first
                        level of objects loaded into the portlet.
                    </para><para>
                        If no depth is specified the default depth is
                        set to 1.
                    </para><para>
                        Another entry that changes default content of
                        the portlet is
                        <emphasis>resolve-links</emphasis>. This entry
                        either exists or not. It has no data and
                        contains no attributes. It is mainly a flag
                        that tells the portlet to treat the target of
                        <emphasis>Symbolic Links</emphasis> as objects
                        in the hierarchy.
                    </para></section><section><title>The Filter definition</title><para>
                        Besides the Definitions what content exists
                        inside the portlet. a portlet must also have a
                        mechanism to define how to restrict the
                        objects to be loaded into the portlet. This is
                        done by the portlet
                        <emphasis>filter</emphasis>. One can think of
                        a portlet filter as of the WHERE clause in SQL
                        queries.
                    </para><para>
                        The Filter definition contains several tags:
                    </para><orderedlist><listitem><para>column</para><para>
                                the column tag MUST have the
                                <emphasis>name</emphasis> attribute
                                that contains the column name to
                                filter. The tag MUST contain at least
                                one value entry. each value must be
                                found exact in the column to match. if
                                more than one value is defined, at
                                least one of the values has to
                                match. If no value entry can be found
                                the specific column filter will be
                                ignored.
                            </para><para>
                                If a column contains character data
                                optionaly a value entry can be wrapped
                                into a <emphasis>has</emphasis>
                                tag. in this case the value has to
                                appear somewhere in the
                                column. (similar to SQL like)
                            </para><para>
                                The portlet filter will check the
                                value types. as soon a value is off an
                                invalid datatype, the entire condition
                                will be ignored.
                            </para></listitem><listitem><para>object-type</para><para>
                                The object type defines a type of
                                which an object MUST be to be
                                filtered. The object-type MUST contain
                                the attribute
                                <emphasis>name</emphasis>. This
                                attribute MUST contains a single
                                object type name (e.g. Document).
                            </para><para>
                                If more than one object type is
                                specified, a filtered object must
                                match at least one of the object-types
                                to be filtered.
                            </para><para>
                                For filters that work only on the
                                first child level this is equivalent
                                to the object-type entry in the
                                content definition.
                            </para></listitem>

                        <listitem><para>child-object</para><para>
                                This entry defines some condition at
                                least one child object must match to
                                filter the object. each child-object
                                may contain column or object type
                                entires but at least one of them.
                            </para></listitem></orderedlist><para>
                        to specify more complex conditions one can
                        wrap any element inside logical conditions:
                        <emphasis>Not</emphasis>,
                        <emphasis>And</emphasis> and
                        <emphasis>Or</emphasis>. On default all
                        entries are in <emphasis>Or</emphasis>
                        relation. This allows restrict the filter.
                    </para></section><section><title>A simple Example</title><para>
                        the following example shows a simple filter to
                        show how the filter schema works.
                    </para><programlisting>
&lt;content&gt;
    &lt;column name=&quot;new&quot;/&gt;
    &lt;column name=&quot;last_modified_by_id&quot;/&gt;
    &lt;column name=&quot;abstract&quot;/&gt;
    &lt;column name=&quot;keywords&quot;/&gt;
&lt;/content&gt;
&lt;filter&gt;
    &lt;column name=&quot;new&quot;&gt;
         &lt;value&gt;1&lt;/value&gt;
    &lt;/column&gt;
    &lt;column name=&quot;title&quot;&gt;
         &lt;has&gt;&lt;value&gt;Foo&lt;/value&gt;&lt;/has&gt;
    &lt;/column&gt;
    &lt;object-type name=&quot;Document&quot;/&gt;
&lt;/filter&gt;
                    </programlisting><para>
                        This example loads the extra information about
                        the object's New flag, its last modifier, the
                        abstract and the keywords of each object found.
                        All this is done for all objects in scope.
                    </para><para>
                        If no filter would be set this would load all
                        this information for all objects inside the
                        object refered by the portlet. In the example
                        though is a filter specified: we want all
                        objects that are either of type 'document',
                        have the new Flag set or have the string 'Foo'
                        somewhere in the string. this means the
                        portlet specified here will contain all
                        documents plus all other objets that match the
                        condition for the title column and those
                        objects that have the new-flag set to 1. As
                        one can imagine this may return pretty much
                        data.
                    </para><para>
                        If we want all object's of type 'document'
                        that are considered as 'new' (new==1) and
                        contain the string Foo in their title, we need
                        to wrap the filter condition into an
                        <emphasis>And</emphasis>:
                    </para><programlisting>
&lt;content&gt;
    &lt;column name=&quot;new&quot;/&gt;
    &lt;column name=&quot;last_modified_by_id&quot;/&gt;
    &lt;column name=&quot;abstract&quot;/&gt;
    &lt;column name=&quot;keywords&quot;/&gt;
&lt;/content&gt;
&lt;filter&gt;
    &lt;And&gt;
        &lt;column name=&quot;new&quot;&gt;
             &lt;value&gt;1&lt;/value&gt;
        &lt;/column&gt;
        &lt;column name=&quot;title&quot;&gt;
             &lt;has&gt;&lt;value&gt;Foo&lt;/value&gt;&lt;/has&gt;
        &lt;/column&gt;
        &lt;object-type name=&quot;Document&quot;/&gt;
    &lt;/And&gt;
&lt;/filter&gt;
                    </programlisting><para>
                        If everything is infact combined by a logical
                        And now, it is usefull to place the object type
                        information into the content definition:
                    </para><para>
                        Note that the And-Tag has to wrap all entries
                        that must be valid at the same time.
                    </para><programlisting>
&lt;content&gt;
    &lt;object-type name=&quot;Document&quot;/&gt;
&lt;/content&gt;
&lt;filter&gt;
    &lt;column name=&quot;new&quot;&gt;
         &lt;value&gt;1&lt;/value&gt;
    &lt;/column&gt;
    &lt;column name=&quot;title&quot;&gt;
         &lt;has&gt;&lt;value&gt;Foo&lt;/value&gt;&lt;/has&gt;
    &lt;/column&gt;
&lt;/filter&gt;
                    </programlisting><para>
                        This will filter all document objects that are
                        either new or have 'Foo' somewhere in their
                        title. Placing the object type into the
                        content definition gives the portlet a hint
                        what is really your content.
                    </para><programlisting>
&lt;content&gt;
    &lt;object-type name=&quot;Document&quot;/&gt;
    &lt;object-type name=&quot;SimpleXML&quot;/&gt;
    &lt;depth level=&quot;2&quot;/&gt;
&lt;/content&gt;
&lt;filter&gt;
    &lt;And&gt;
        &lt;Or&gt;
            &lt;column name=&quot;new&quot;&gt;
                 &lt;value&gt;1&lt;/value&gt;
            &lt;/column&gt;
            &lt;column name=&quot;title&quot;&gt;
                 &lt;has&gt;&lt;value&gt;Foo&lt;/value&gt;&lt;/has&gt;
            &lt;/column&gt;
        &lt;/Or&gt;
        &lt;object-type name=&quot;document&quot;/&gt;
    &lt;/And&gt;
&lt;/filter&gt;
                    </programlisting><para>
                        What is this doing? It is similar to the
                        previous filter, but if filters also all child
                        objects for the filtered documents, that are
                        either Documents or SimpleXML objects. In fact
                        this is the same query as the previous one,
                        since Document objects cannot have other
                        documents or simple XML as child objects. But
                        i think this illustrates how complex object
                        types can efficiently be filtered.
                    </para></section></section></section><section><title>Portals</title><para>
                Technically a portal is a special Folderobject that
                may contain <emphasis>only</emphasis> portlet
                ojects. Since a single portlet may is used in various
                places, the portal itself may contain only
                <emphasis>symbolic links</emphasis> to the Portlets it
                should contain. Because of this restriction a Portal
                may only contain existing portlets, that live outside
                the portal itself.
            </para><para>
                If a portal is published it will not be published as a
                directory, but as a XML file that x-includes each
                currently published and referred Portlet instead of
                containing the real data inside the document. Because
                of this the portal needs only to be updated if a
                portlet is initially published (not on
                republish!). Doing this a Portal is automaticly
                updated as soon one related portlet is updated,
                too. As well this reduces the times the portlet
                filter have to be processed.
            </para><para>
                An example portal document may look like this:
            </para><programlisting>
&lt;document&gt;
    &lt;objectlist&gt;
        &lt;xinclude:include href=&quot;/path/to/portlet.xml&quot;/&gt;
        &lt;xinclude:include href=&quot;/path/to/portlet2.xml&quot;/&gt;
        &lt;xinclude:include href=&quot;/path/to/portlet3.xml&quot;/&gt;
        &lt;xinclude:include href=&quot;/path/to/portlet4.xml&quot;/&gt;
    &lt;/objectlist&gt;
&lt;/document&gt;
            </programlisting></section></section></article>
