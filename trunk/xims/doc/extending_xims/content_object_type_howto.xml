<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<article>
    <title>Content Object Type HOWTO</title>

    <section>
        <title>What is a content object type?</title>

        <para>As the name suggests, content object types are different types of content objects. After installing XIMS, there are different groups of content
        object types available, ranging from container object types like <literal>Folder</literal> and <literal>DepartmentRoot</literal> to XML object types
        like <literal>Document</literal> and <literal>DocBookXML</literal>, to binary object types like <literal>File</literal> and <literal>Image</literal>.
        All content object types share the same data storage property structure. In case of the DBI <literal>DataProvider</literal> that properties are
        available through the <literal>ci_documents</literal> and <literal>ci_content</literal> tables. Content objects are stored in two tables to separate
        language-dependant from language-independant data and to enable content versioning. Using that data model, it is possible to create content in several
        languages sharing the same place in the hierarchy and sharing the other language independant properties.</para>
    </section>

    <section>
        <title>Creating content object types using cot_creator.pl</title>

        <para>Work on three layers is needed to create a new content object type. First, the content object type has to be defined at the data storage layer.
        Using the DBI <literal>DataProvider</literal>, this means creating an entry in the <literal>ci_object_type</literal> table. Second, the content object
        type has to be defined at the application logic layer. An object-, application-, and exporter-class is needed for that. Third, at the presentation logic
        layer, XSL-Stylesheets are needed to provide the user interface for the content object type specific management needs.</para>

        <para><filename>cot_creator.pl</filename> is a tool that will save you some of that work. To get a first idea of what it is about, let us take a look at
        the synopsis:</para>

        <programlisting>   Usage: ./cot_creator.pl [-h|-n object_type_name [-i isa] [-f data_format_name]
            [-c -m mime_type -s suffix] [-o outputdir] [-u dbusername]
            [-p dbpassword] [-d debuglevel] ]

        -h Prints this screen
        -n The name of the object type you want to create
        -i The super class of the object-, application-, and exporter-
           class; defaults to XIMS::Object, XIMS::CGI, and
           XIMS::Exporter::XML respectively
        -f The name of the data format (list of df)
            If you want to create a new data format, you have to set the
            following three arguments:
            -c flag to actually create the data format
            -m mime-type
            -s suffix
        -u If set, overrides XIMS::Config::DBUser. You may need this if
           the database user specified in XIMS::Config::DBUser has
           insufficient privileges to create object types or data
           formats. For Pg, for example the user default user &#39;xims&#39; has
           the privileges, whereas &#39;ximsrun&#39; does not.
        -p If set, overrides XIMS::Config::DBPassword
        -o Output directory of template modules and stylesheets,
           defaults to &#39;.&#39;
        -d If set, overrides XIMS::Config::DebugLevel.</programlisting>

        <para><filename>cot_creator.pl</filename> does the following: First, it adds the object type to the database, after that it creates basic object-,
        application-, and exporter-classes, as well as XSL-Stylesheets for the events, <literal>create</literal>, <literal>default</literal>,
        <literal>edit</literal> and <literal>publish</literal>. The following examples should give an idea of how that looks like in practice.</para>
    </section>

    <section>
        <title>Example content object types</title>

        <para></para>

        <section>
            <title>Text</title>

            <para>Tired to write well-balanced <literal>Documents</literal> just to save little notes? Or you do have legacy plain text files which you just
            want to deposit in the XIMS data storage and use features like the ACL system to manage them? An object type <literal>Text</literal> to manage such
            plain text files will help with that. Let us start out with <filename>cot_creator.pl</filename> to create it:</para>

            <para><command>./cot_creator.pl -n Text -f Text -u xims -o /tmp -d 1</command></para>

            <para><command>This will generate the object type <literal>Text</literal> in the database (you may have to adjust the database username -u) and
            output the following files:</command></para>

            <itemizedlist>
                <listitem>
                    <para>/tmp/ot_creator_out/bin/text.pm</para>
                </listitem>

                <listitem>
                    <para>/tmp/ot_creator_out/lib/XIMS/Exporter/Text.pm</para>
                </listitem>

                <listitem>
                    <para>/tmp/ot_creator_out/lib/XIMS/Text.pm</para>
                </listitem>

                <listitem>
                    <para>/tmp/ot_creator_out/www/ximsroot/skins/skinname/stylesheets/language/text_create.xsl</para>
                </listitem>

                <listitem>
                    <para>/tmp/ot_creator_out/www/ximsroot/skins/skinname/stylesheets/language/text_default.xsl</para>
                </listitem>

                <listitem>
                    <para>/tmp/ot_creator_out/www/ximsroot/skins/skinname/stylesheets/language/text_edit.xsl</para>
                </listitem>

                <listitem>
                    <para>/tmp/ot_creator_out/www/ximsroot/stylesheets/exporter/export_text.xsl</para>
                </listitem>
            </itemizedlist>

            <para>After copying the files to their respective path in your XIMS installation - usually somewhere below /usr/local/xims - we&#39;ll focus at the
            newly created application-class /usr/local/xims/bin/text.pm first.</para>

            <para>Before overriding or adding event handlers it is a good idea to get acquainted with the event handlers of the super class to know where
            different or additional logic is needed. After reviewing the basic event handlers of <literal>XIMS::CGI</literal>, it can be seen that we need to
            override <literal>event_store()</literal> to handle the body-field. Additionally, as plaint text documents are not well-formed - at least most of
            the time they aren&#39;t - we have to XML-escape the body before it gets stored. The following code snippet shows how that looks like:</para>

            <programlisting>sub event_store {
    XIMS::Debug( 5, &#34;called&#34; );
    my ( $self, $ctxt ) = @_;

    return 0 unless $self-&#62;init_store_object( $ctxt ) # handles common params
                    and defined $ctxt-&#62;object();

    my $body $self-&#62;param( &#39;body&#39; ); # get the body
    if ( length $body ) {
        my $object = $ctxt-&#62;object();
        $object-&#62;body( XIMS::xml_escape( $body ) ); # xml-escape the body, plaintext files are not well-formed
    }

    return $self-&#62;SUPER::event_store( $ctxt ); # does the actual $object-&#62;update or $object-&#62;store
}</programlisting>

            <para><literal>Text</literal> objects can now be created and edited. However, at <literal>event_</literal><literal>default()</literal> they are
            shown in one big ugly unformatted chunk of text. To change that, we have several implementation options. It&#39;s still Perl, so TIMTOWTDI. We
            <emphasis>could</emphasis> override <literal>event_default()</literal> and replace all newlines with &#39;&#60;br /&#62;&#39;s, all spaces with
            &#39;&#38;#160;&#39;s using regular expression substitutions. We <emphasis>could</emphasis> update <filename>text_default.xsl</filename> to wrap the
            body inside a &#60;pre&#62;-tag. For a little XSLT practice, we also can update <filename>text_default.xsl</filename> to convert newlines and spaces
            to their HTML representation. Adding the following two XSL templates to <filename>text_default.xsl</filename> implements that conversion:</para>

            <programlisting>&#60;xsl:template match=&#34;body&#34;&#62;
    &#60;xsl:call-template name=&#34;brspace-replace&#34;&#62;
        &#60;xsl:with-param name=&#34;word&#34; select=&#34;.&#34;/&#62;
    &#60;/xsl:call-template&#62;
&#60;/xsl:template&#62;

&#60;xsl:template name=&#34;brspace-replace&#34;&#62;
    &#60;xsl:param name=&#34;word&#34;/&#62;
    &#60;xsl:param name=&#34;foundbr&#34; select=&#34;0&#34;/&#62;
    &#60;xsl:param name=&#34;foundspace&#34; select=&#34;0&#34;/&#62;
    &#60;xsl:variable name=&#34;cr&#34;&#62;&#60;xsl:text&#62;
&#60;/xsl:text&#62;&#60;/xsl:variable&#62;
    &#60;xsl:variable name=&#34;space&#34;&#62;&#60;xsl:text&#62; &#60;/xsl:text&#62;&#60;/xsl:variable&#62;
    &#60;xsl:choose&#62;
        &#60;xsl:when test=&#34;contains($word,$cr) and ($foundbr = 0 or $foundspace = 1)&#34;&#62;
            &#60;xsl:if test=&#34;$foundspace = 0&#34;&#62;
                &#60;xsl:value-of select=&#34;substring-before($word,$cr)&#34;/&#62;
            &#60;/xsl:if&#62;
            &#60;br/&#62;
            &#60;xsl:call-template name=&#34;brspace-replace&#34;&#62;
                &#60;xsl:with-param name=&#34;word&#34; select=&#34;substring-after($word,$cr)&#34;/&#62;
                &#60;xsl:with-param name=&#34;foundbr&#34; select=&#34;1&#34;/&#62;
            &#60;/xsl:call-template&#62;
        &#60;/xsl:when&#62;
        &#60;xsl:when test=&#34;contains($word,$space) and ($foundspace = 0 or $foundbr = 1)&#34;&#62;
            &#60;xsl:value-of select=&#34;translate(substring-before($word,$cr),$space,&#39;&#38;#160;&#39;)&#34;/&#62;
            &#60;xsl:call-template name=&#34;brspace-replace&#34;&#62;
                &#60;xsl:with-param name=&#34;word&#34; select=&#34;substring-after($word,$space)&#34;/&#62;
                &#60;xsl:with-param name=&#34;foundspace&#34; select=&#34;1&#34;/&#62;
            &#60;/xsl:call-template&#62;
        &#60;/xsl:when&#62;
        &#60;xsl:otherwise&#62;
            &#60;xsl:value-of select=&#34;$word&#34;/&#62;
        &#60;/xsl:otherwise&#62;
    &#60;/xsl:choose&#62;
&#60;/xsl:template&#62;</programlisting>

            <para>Now we got all default events running besides one. We can create, display, edit, delete, or manage the ACL of <literal>Text</literal> objects,
            what we still can not do, is to publish or unpublish them. To achieve that, <literal>Exporter::Text</literal> needs updating. <filename>cot_creator.pl</filename>
            sets the value of the @ISA variable to <literal>XIMS::Exporter::XML</literal> per default. As <literal>Text</literal> objects are not XML objects,
            we have to alter that to a super class that simply outputs the body of the <literal>Text</literal> object during export. Setting @ISA to
            <literal>XIMS::Exporter::Binary</literal> does the job here. Still, exporting a <literal>Text</literal> objects does not yield the result we need
            because the published objects get output as is, and that means XML-escaped like they are stored in the database. To change that, we have to override
            the <literal>create()</literal> method taking the logic of <literal>XIMS::Exporter::Binary::create()</literal> and adding a call to
            <literal>XIMS::xml_unescape()</literal>:</para>

            <programlisting>sub create {
    XIMS::Debug( 5, &#34;called&#34; );

    my ( $self, %param ) = @_;
    my $document_path =  $self-&#62;{Exportfile} || $self-&#62;{Basedir} . &#39;/&#39; . $self-&#62;{Object}-&#62;location;

    XIMS::Debug( 4, &#34;trying to write the object to $document_path&#34; );

    # create the item on disk
    my $document_fh = IO::File-&#62;new( $document_path, &#39;w&#39; );
    if ( defined $document_fh ) {
        print $document_fh XIMS::xml_unescape( $self-&#62;{Object}-&#62;body() ); # xml-unescape the body content
        $document_fh-&#62;close;
        XIMS::Debug( 4, &#34;document written&#34; );
    }
    else {
        XIMS::Debug( 2, &#34;Error writing file &#39;$document_path&#39;: $!&#34; );
        return undef;
    }

    XIMS::Debug( 4, &#34;toggling publish state of the object&#34; );
    $self-&#62;toggle_publish_state( &#39;1&#39; );

    return 1;
}</programlisting>

            <para>Object type <literal>Text</literal> is now fully functional but yet open for extensions. For example, with a few lines of code an additional
            plain text file upload facility can be implemented. See <literal>text::event_store()</literal>, <filename>text_edit.xsl</filename>, and
            <filename>text_create.xsl</filename> in the XIMS distribution for an example of that functionality.</para>
        </section>

        <section>
            <title>CSS</title>

            <para>With the second example for creating new content object types we want to show how to add object type specific events. Next to the basic events
            provided by the super class <literal>XIMS::Text</literal> we want to validate the CSS objects using the CPAN <literal>CSS::Tiny</literal> module.
            Before implementing that, let us first create the object type:</para>

            <para><command>./cot_creator.pl -n CSS -i XIMS::Text -f CSS -u xims -o /tmp -d 1</command></para>

            <para>Again, we have to copy the generated files to their respective path of the XIMS installation. After that, we already have a working new
            content object type that just misses the basic formatting of the CSS objects during event <literal>default</literal>. Copying the templates or the
            whole file of <filename>text_default.xsl</filename> to <filename>css_default.xsl</filename> helps with that.</para>

            <para>We need the CPAN <literal>CSS::Tiny</literal> module to implement CSS validation. If you do not have it installed you may do it by issueing
            the command</para>

            <para><command>perl -MCPAN -e &#39;install CSS::Tiny&#39;</command></para>

            <para>With an installed and working <literal>CSS::Tiny</literal> module we want to add an <literal>event_parse_css()</literal> to our
            <filename>css.pm</filename> application class, using the <literal>read_string()</literal> method of <literal>CSS::Tiny</literal> module to parse the
            body.</para>

            <para>To actually get that method running, we must not forget to load <literal>CSS::Tiny</literal> and adjust <literal>registerEvents()</literal>
            not to use <literal>$_[0]-&#62;SUPER::registerEvents()</literal> but to just return the list of events including <literal>parse_css</literal>.
            Unfortunately, there is no such thing like a SUPER::SUPER-&#62;method in Perl.</para>

            <para>After updating the final bits, the whole <filename>css.pm</filename> looks like this:</para>

            <programlisting>package css;

use strict;
use vars qw( $VERSION @ISA );
use text;

use CSS::Tiny;

# version string (for makemaker, so don&#39;t touch!)
$VERSION = do { my @r = (q$Revision$ =~ /\d+/g); sprintf &#34;%d.&#34;.&#34;%02d&#34; x $#r, @r };

@ISA = qw( text );

# (de)register events here
sub registerEvents {
    return qw(
          default
          create
          edit
          store
          delete
          delete_prompt
          obj_acllist
          obj_aclgrant
          obj_aclrevoke
          publish
          publish_prompt
          unpublish
          cancel
          parse_css
          );
}

sub event_parse_css {
    XIMS::Debug( 5, &#34;called&#34; );
    my ( $self, $ctxt ) = @_;

    return 0 if $self-&#62;SUPER::event_default( $ctxt );

    my $body = $ctxt-&#62;object-&#62;body();             # grep the body
    my $css = CSS::Tiny-&#62;read_string( $body );    # parse it
    if ( $CSS::Tiny::errstr ) {
        $ctxt-&#62;session-&#62;error_msg( &#34;Parse failure&#34; );      # set error message
        $ctxt-&#62;session-&#62;verbose_msg( $CSS::Tiny::errstr );
    }
    else {
        $ctxt-&#62;session-&#62;message( &#34;Parse ok. Parsed CSS:&#34; );
        $ctxt-&#62;session-&#62;verbose_msg( $css-&#62;write_string() );
    }

    $ctxt-&#62;properties-&#62;application-&#62;styleprefix( &#34;common&#34; );           # this will tell CGI::XMLApplication to use the
    $ctxt-&#62;properties-&#62;application-&#62;style( &#34;message_window_plain&#34; );   # file &#39;common_message_window_plain.xsl&#39; for XSL transformation

    return 0;
}

1;</programlisting>

            <para>Now, we a got a working new event. As a final step, we want to make it available through the user interface. Inserting the following fragment
            before the footer table in <filename>css_default.xsl</filename> provides the neccessary link to activate it in a new window:</para>

            <programlisting>&#60;table align=&#34;center&#34; width=&#34;98.7%&#34; class=&#34;footer&#34;&#62;
    &#60;tr&#62;
        &#60;td&#62;
            &#60;a href=&#34;{$xims_box}{$goxims_content}{$absolute_path}?parse_css=1&#34; target=&#34;_new&#34;&#62;Validate CSS&#60;/a&#62;
        &#60;/td&#62;
    &#60;/tr&#62;
&#60;/table&#62;</programlisting>

            <para></para>
        </section>
    </section>
</article>